// this chip is used to generate internal carry bits

CHIP intCarryGen {
  IN x[4], y[4], c0;
  OUT c1, c2, c3;

  PARTS:

  //creating the propogating terms

  Xor(a = x[0], b = y[0], out = p0);
  Xor(a = x[1], b = y[1], out = p1);
  Xor(a = x[2], b = y[2], out = p2);
  Xor(a = x[3], b = y[3], out = p3);

  //creating the generate terms

  And(a = x[0], b = y[0], out = g0);
  And(a = x[1], b = y[1], out = g1);
  And(a = x[2], b = y[2], out = g2);
  And(a = x[3], b = y[3], out = g3);

  //generating the carry terms based on the propogating and generate terms

  //given the carry in we generate the other carry terms

  //we create all the 'And' related propogating terms

  //linking the carry in and generate terms with propogating terms using 'and' gate

  And(a = p0, b = c0, out = cp0);
  And(a = p1, b = cp0, out = cp01);
  And(a = p1, b = g0, out = g0p1);
  And(a = p2, b = cp01, out = cp012);
  And(a = p2, b = g0p1, out = g0p12);
  And(a = p2, b = g1, out = g1p2);
  And(a = p3, b = g2, out = g2p3);

  //Generating the internal carrying terms

  //c1

  Or(a = cp0, b = g0, out = c1);

  //c2

  Or(a = cp01, b = g0p1, out = h1c2);
  Or(a = h1c2, b = g1, out = c2);

  //c3

  Or(a = cp012, b = g0p12, out = h1c3);
  Or(a = h1c3, b = g1p2, out = h2c3);
  Or(a = h2c3, b = g2, out = c3);
}